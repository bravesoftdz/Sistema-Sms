unit USmsEmail;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, IdTCPConnection, IdTCPClient, IdMessageClient, IdSMTP,
  IdComponent, IdIOHandler, IdIOHandlerSocket, IdSSLOpenSSL,
  IdBaseComponent, IdMessage, StdCtrls, AppEvnts, IdIOHandlerStack, IdSSL,
  IdExplicitTLSClientServerBase, IdSMTPBase;

type
  TSmsEmail = class(TForm)
    IdMessageAgendamento: TIdMessage;
    IdSMTPAgendamento: TIdSMTP;
    Memo1: TMemo;
    IdSSLIOHandlerSocketAgendamento: TIdSSLIOHandlerSocketOpenSSL;
    procedure FormShow(Sender: TObject);
    procedure ApplicationEvents1Exception(Sender: TObject; E: Exception);
 //   procedure FormCreate(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  SmsEmail: TSmsEmail;

implementation

uses Math;

{$R *.dfm}

Function ConverterHtml(Texto : String) : String;
begin
  Result :=  StringReplace(Texto,'Á',';&Aacute',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'È',';&Egrave',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'ô',';&ocirc',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'Ç',';&Ccedil',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'à',';&agrave',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'Ã',';&Atilde',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'Í',';&Iacute',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'Ò',';&Ograve',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'ç','&ccedil',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'Ó',';&Oacute',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'ã',';&atilde',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'Ä',';&Auml',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'Õ',';&Otilde',[rfReplaceAll]) ;
  Result :=  StringReplace(Result,'õ',';&otilde',[rfReplaceAll]) ;
end;

procedure ConectaEmailAgendamento;
begin
  with SmsEmail do begin
    IdSMTPAgendamento.IOHandler := IdSSLIOHandlerSocketAgendamento  ;
    IdSMTPAgendamento.AuthenticationType := atLogin;
    IdSMTPAgendamento.Port := 465;
    IdSMTPAgendamento.Host := 'email-smtp.us-west-2.amazonaws.com';
    IdSMTPAgendamento.Username := 'AKIAJVLO2YAUFJVB2UHQ';
    IdSMTPAgendamento.Password := 'Ao69w253pZBzZaUy780w5T1kZMGr8gmU8ycPhjzpphbW';
    try
      IdSSLIOHandlerSocketAgendamento.SSLOptions.Method := sslvSSLv2;
      IdSSLIOHandlerSocketAgendamento.SSLOptions.Mode := sslmClient;

      IdSMTPAgendamento.Connect;
      //IdSMTP.Authenticate;
    except on E:Exception do begin
      MessageDlg('Erro na conexão e/ou autenticação do Email: ' + E.Message, mtWarning, [mbOK], 0);
      //btConectaBancoDeDados.Click;
      Exit;
    end;
    end;
  end;

end;

procedure TSmsEmail.FormShow(Sender: TObject);

  Function CarregaTextoEmail(Texto : String) : String;
  Var Memo : TMemo;
  begin
    Memo := TMemo.Create(nil);
    Memo.Parent := SmsEmail;
    Memo.Hide;
    Memo.Lines.LoadFromFile(Texto+'.txt');
    Result := Memo.Lines.Text;
    Memo.Destroy;
  end;

begin
  //Sleep(60000);
  ConectaEmailAgendamento;
  with SmsEmail do begin

    IdMessageAgendamento.ContentType:='text/html';
    IdMessageAgendamento.From.Address := 'simplessms@gmail.com';//Trim(ParamStr(1));
    IdMessageAgendamento.From.Name := 'hjjhjhjj';
    IdMessageAgendamento.Recipients.EMailAddresses := 'simplessms@gmail.com';
    IdMessageAgendamento.Subject := AnsiToUtf8('Condições');
    IdMessageAgendamento.Body.Text := (Memo1.Lines.Text);
    IdSMTPAgendamento.Send(IdMessageAgendamento);

  end;
  Application.Terminate;
end;
procedure TSmsEmail.ApplicationEvents1Exception(Sender: TObject;
  E: Exception);
begin
  ShowMessage(e.Message);
end;

end.
